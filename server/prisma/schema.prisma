// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdInvoices Invoice[] @relation("CreatedBy")
  assignedVehicles Vehicle[] @relation("AssignedTo")
  activities      Activity[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  TECHNICIAN
}

// Inventory Management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  items    Item[]

  @@map("categories")
}

model Item {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?
  categoryId  String
  brand       String?
  model       String?
  cost        Decimal  @db.Decimal(10, 2)
  price       Decimal  @db.Decimal(10, 2)
  minStock    Int      @default(0)
  maxStock    Int?
  isActive    Boolean  @default(true)
  barcode     String?  @unique
  weight      Decimal? @db.Decimal(8, 2)
  dimensions  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category     Category @relation(fields: [categoryId], references: [id])
  inventory    Inventory[]
  invoiceItems InvoiceItem[]
  poItems      PurchaseOrderItem[]
  receivingItems ReceivingItem[]

  @@map("items")
}

model Warehouse {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory Inventory[]
  receiving  Receiving[]

  @@map("warehouses")
}

model Vehicle {
  id          String   @id @default(cuid())
  name        String
  licensePlate String  @unique
  make        String?
  model       String?
  year        Int?
  assignedTo  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedUser User? @relation("AssignedTo", fields: [assignedTo], references: [id])
  inventory    Inventory[]

  @@map("vehicles")
}

model Inventory {
  id          String   @id @default(cuid())
  itemId      String
  warehouseId String?
  vehicleId   String?
  quantity    Int      @default(0)
  location    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item      Item @relation(fields: [itemId], references: [id])
  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  @@unique([itemId, warehouseId, vehicleId])
  @@map("inventory")
}

// Customer Management
model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoices Invoice[]

  @@map("customers")
}

// Vendor Management
model Vendor {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  contactPerson String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]

  @@map("vendors")
}

// Invoicing System
model Invoice {
  id          String   @id @default(cuid())
  invoiceNumber String @unique
  customerId  String
  createdBy   String
  status      InvoiceStatus @default(DRAFT)
  subtotal    Decimal  @db.Decimal(10, 2)
  tax         Decimal  @db.Decimal(10, 2) @default(0)
  total       Decimal  @db.Decimal(10, 2)
  notes       String?
  dueDate     DateTime?
  paidDate    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  createdByUser User @relation("CreatedBy", fields: [createdBy], references: [id])
  items       InvoiceItem[]

  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  itemId    String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  item    Item @relation(fields: [itemId], references: [id])

  @@map("invoice_items")
}

// Purchase Orders
model PurchaseOrder {
  id          String   @id @default(cuid())
  poNumber    String   @unique
  vendorId    String
  status      POStatus @default(DRAFT)
  subtotal    Decimal  @db.Decimal(10, 2)
  tax         Decimal  @db.Decimal(10, 2) @default(0)
  total       Decimal  @db.Decimal(10, 2)
  notes       String?
  orderDate   DateTime @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id])
  items  PurchaseOrderItem[]
  receiving Receiving[]

  @@map("purchase_orders")
}

enum POStatus {
  DRAFT
  SENT
  CONFIRMED
  RECEIVED
  CANCELLED
}

model PurchaseOrderItem {
  id        String   @id @default(cuid())
  poId      String
  itemId    String
  quantity  Int
  cost      Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id])
  item          Item @relation(fields: [itemId], references: [id])

  @@map("purchase_order_items")
}

// Receiving
model Receiving {
  id          String   @id @default(cuid())
  receivingNumber String @unique
  poId        String?
  warehouseId String
  receivedBy  String
  receivedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  purchaseOrder PurchaseOrder? @relation(fields: [poId], references: [id])
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  items         ReceivingItem[]

  @@map("receiving")
}

model ReceivingItem {
  id          String   @id @default(cuid())
  receivingId String
  itemId      String
  quantity    Int
  cost        Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  // Relations
  receiving Receiving @relation(fields: [receivingId], references: [id])
  item     Item @relation(fields: [itemId], references: [id])

  @@map("receiving_items")
}

// Activity Logging
model Activity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String?
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("activities")
} 